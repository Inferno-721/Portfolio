---
export const prerender = false;
import BaseLayout from "@/layouts/BaseLayout.astro";
import BackLink from "@/components/garden/BackLink.astro";
import GardenHeader from "@/components/garden/GardenHeader.astro";
import LeafCard from "@/components/garden/LeafCard.astro";
import AddButton from "@/components/garden/AddButton.astro";
import { createClient } from '@supabase/supabase-js';

// Create a Supabase client using environment variables
const supabaseUrl = import.meta.env.SUPABASE_URL;
const supabaseAnonKey = import.meta.env.SUPABASE_KEY;
const supabase = createClient(supabaseUrl, supabaseAnonKey);

// Get the tree slug from the URL parameters
const { tree: treeSlug } = Astro.params;

// Query the tree with its embedded leaves and leaf references
const { data: tree, error } = await supabase
  .from('trees')
  .select(`
    *,
    leaves (
      *,
      leaf_references (*)
    )
  `)
  .eq('slug', treeSlug)
  .single();

if (error || !tree) {
  console.error("Error fetching tree:", error);
  return Astro.redirect('/garden');
}

// Query metadata from the growth_stages table
const { data: metadataData, error: metadataError } = await supabase
  .from('growth_stages')
  .select('*');

if (metadataError) {
  console.error("Error fetching metadata:", metadataError);
}

// Wrap the metadata to match the expected type shape
const metadata = { growthStages: metadataData ?? [] };
---
<BaseLayout title={tree.name} description={tree.description}>
  <div class="container mx-auto pt-24 pb-12 md:pt-32 xl:pt-24">
    <BackLink href="/garden/" text="Back to Garden" />
    <GardenHeader title={tree.name} description={tree.description} />

    <div class="space-y-6">
      {tree.leaves.map((leaf : any) => (
        <LeafCard 
          leaf={leaf} 
          treeSlug={tree.slug} 
          metadata={metadata} 
        />
      ))}
      
      <!-- Add Leaf Button -->
      <div class="h-[120px]">
        <AddButton type="leaf" treeSlug={tree.slug} />
      </div>
    </div>
  </div>
</BaseLayout>
