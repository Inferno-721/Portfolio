---
import Heading from "@/components/Heading.astro";
import BaseLayout from "@/layouts/BaseLayout.astro";
import { SITE } from "@/consts";
import { trees } from "@garden";

export function getStaticPaths() {
  return trees.flatMap((tree) =>
    tree.leaves.map((leaf) => ({
      params: { tree: tree.slug, leaf: leaf.slug },
      props: { tree, leaf },
    })),
  );
}

const { tree, leaf } = Astro.props;
---

<BaseLayout title={leaf.title} description={leaf.content.substring(0, 150)}>
  <div class="container mx-auto my-24 xl:my-5">
    <div class="mb-8">
      <a
        href={`/garden/${tree.slug}`}
        class="inline-flex items-center text-sm text-black/60 hover:text-black dark:text-white/60 dark:hover:text-white"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          class="mr-2 h-4 w-4"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
        </svg>
        Back to {tree.name}
      </a>
    </div>

    <article class="prose prose-lg max-w-none dark:prose-invert">
      <header class="not-prose mb-8">
        <Heading title={leaf.title} />
        <div class="mt-4 flex flex-wrap items-center gap-4">
          <div class="flex items-center">
            <span class="text-sm text-black/60 dark:text-white/60"
              >{leaf.date}</span
            >
          </div>
          <div class="flex items-center">
            <span
              class="rounded-full bg-black/10 px-2 py-1 text-xs dark:bg-white/10"
              >{leaf.growthStage}</span
            >
          </div>
          <div class="flex flex-wrap gap-2">
            {
              leaf.tags.map((tag) => (
                <span class="rounded-full bg-black/5 px-2 py-0.5 text-xs dark:bg-white/5">
                  {tag}
                </span>
              ))
            }
          </div>
        </div>
      </header>

      <div class="content">
        {leaf.content.split("\n").map((paragraph) => <p>{paragraph}</p>)}
      </div>

      {
        leaf.references && leaf.references.length > 0 && (
          <div class="mt-12 border-t border-black/10 pt-6 dark:border-white/10">
            <h3>References</h3>
            <ul>
              {leaf.references.map((ref) => (
                <li>
                  <a href={ref.url} target="_blank" rel="noopener noreferrer">
                    {ref.title}
                  </a>
                </li>
              ))}
            </ul>
          </div>
        )
      }
    </article>
  </div>
</BaseLayout>
